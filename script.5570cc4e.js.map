{"version":3,"sources":["script.js"],"names":["canvas","document","getElementById","ctx","getContext","width","height","cellSize","cellGap","numberOfResources","enemiesInterval","frame","gameOver","score","winningScore","chosenDefender","gameGrid","defenders","enemies","enemyPositions","projectiles","resources","mouse","x","y","clicked","addEventListener","canvasPosition","getBoundingClientRect","e","left","top","undefined","controlsBar","Cell","collision","strokeStyle","strokeRect","createGrid","push","handleGameGrid","i","length","draw","Projectile","power","speed","fillStyle","beginPath","arc","Math","PI","fill","handleProjectiles","update","j","health","splice","defender1","Image","onload","src","defender2","Defender","shooting","shootNow","timer","frameX","frameY","spriteWidth","spriteHeight","minFrame","maxFrame","font","fillText","floor","drawImage","handleDefenders","indexOf","movement","gridPositionX","gridPositionY","card1","card2","chooseDefender","card1stroke","card2stroke","lineWidth","fillRect","enemyTypes","enemy1","enemy2","Enemy","verticalPosition","random","maxHealth","enemyType","round","handleEnemies","gainedResources","findThisIndex","amounts","Resource","amount","handleResources","handleGameStatus","animate","clearRect","requestAnimationFrame","first","second","window"],"mappings":"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","file":"script.5570cc4e.js","sourceRoot":"..","sourcesContent":["const canvas = document.getElementById(\"canvas1\");\r\nconst ctx = canvas.getContext(\"2d\");\r\ncanvas.width = 900;\r\ncanvas.height = 600;\r\n\r\n// global variables\r\nconst cellSize = 100;\r\nconst cellGap = 3;\r\nlet numberOfResources = 300;\r\nlet enemiesInterval = 600;\r\nlet frame = 0;\r\nlet gameOver = false;\r\nlet score = 0;\r\nconst winningScore = 50;\r\nlet chosenDefender = 1;\r\n\r\nconst gameGrid = [];\r\nconst defenders = [];\r\nconst enemies = [];\r\nconst enemyPositions = [];\r\nconst projectiles = [];\r\nconst resources = [];\r\n\r\n// mouse\r\nconst mouse = {\r\n  x: 10,\r\n  y: 10,\r\n  width: 0.1,\r\n  height: 0.1,\r\n  clicked: false\r\n};\r\ncanvas.addEventListener(\"mousedown\", function () {\r\n  mouse.clicked = true;\r\n});\r\ncanvas.addEventListener(\"mouseup\", function () {\r\n  mouse.clicked = false;\r\n});\r\n\r\nlet canvasPosition = canvas.getBoundingClientRect();\r\ncanvas.addEventListener(\"mousemove\", function (e) {\r\n  mouse.x = e.x - canvasPosition.left;\r\n  mouse.y = e.y - canvasPosition.top;\r\n});\r\ncanvas.addEventListener(\"mouseleave\", function () {\r\n  mouse.y = undefined;\r\n  mouse.y = undefined;\r\n});\r\n\r\n// game board\r\nconst controlsBar = {\r\n  width: canvas.width,\r\n  height: cellSize\r\n};\r\nclass Cell {\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = cellSize;\r\n    this.height = cellSize;\r\n  }\r\n  draw() {\r\n    if (mouse.x && mouse.y && collision(this, mouse)) {\r\n      ctx.strokeStyle = \"black\";\r\n      ctx.strokeRect(this.x, this.y, this.width, this.height);\r\n    }\r\n  }\r\n}\r\nfunction createGrid() {\r\n  for (let y = cellSize; y < canvas.height; y += cellSize) {\r\n    for (let x = 0; x < canvas.width; x += cellSize) {\r\n      gameGrid.push(new Cell(x, y));\r\n    }\r\n  }\r\n}\r\ncreateGrid();\r\nfunction handleGameGrid() {\r\n  for (let i = 0; i < gameGrid.length; i++) {\r\n    gameGrid[i].draw();\r\n  }\r\n}\r\n// projectiles\r\nclass Projectile {\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = 10;\r\n    this.height = 10;\r\n    this.power = 20;\r\n    this.speed = 5;\r\n  }\r\n  update() {\r\n    this.x += this.speed;\r\n  }\r\n  draw() {\r\n    ctx.fillStyle = \"black\";\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y, this.width, 0, Math.PI * 2);\r\n    ctx.fill();\r\n  }\r\n}\r\nfunction handleProjectiles() {\r\n  for (let i = 0; i < projectiles.length; i++) {\r\n    projectiles[i].update();\r\n    projectiles[i].draw();\r\n\r\n    for (let j = 0; j < enemies.length; j++) {\r\n      if (\r\n        enemies[j] &&\r\n        projectiles[i] &&\r\n        collision(projectiles[i], enemies[j])\r\n      ) {\r\n        enemies[j].health -= projectiles[i].power;\r\n        projectiles.splice(i, 1);\r\n        i--;\r\n      }\r\n    }\r\n\r\n    if (projectiles[i] && projectiles[i].x > canvas.width - cellSize) {\r\n      projectiles.splice(i, 1);\r\n      i--;\r\n    }\r\n  }\r\n}\r\n\r\n// defenders\r\nvar defender1 = {};\r\ndefender1 = new Image();\r\ndefender1.onload = function () {};\r\ndefender1.src = \"src/defender1.png\";\r\nvar defender2 = {};\r\ndefender2 = new Image();\r\ndefender2.onload = function () {};\r\ndefender2.src = \"src/defender2.png\";\r\n\r\nclass Defender {\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = cellSize - cellGap * 2;\r\n    this.height = cellSize - cellGap * 2;\r\n    this.shooting = false;\r\n    this.shootNow = false;\r\n    this.health = 100;\r\n    this.projectiles = [];\r\n    this.timer = 0;\r\n    this.frameX = 0;\r\n    this.frameY = 0;\r\n    this.spriteWidth = 192;\r\n    this.spriteHeight = 192;\r\n    this.minFrame = 0;\r\n    this.maxFrame = 16;\r\n    this.chosenDefender = chosenDefender;\r\n  }\r\n  draw() {\r\n    // ctx.fillStyle = \"blue\";\r\n    // ctx.fillRect(this.x, this.y, this.width, this.height);\r\n    ctx.fillStyle = \"black\";\r\n    ctx.font = \"30px Orbitron\";\r\n    ctx.fillText(Math.floor(this.health), this.x + 15, this.y + 30);\r\n    if (this.chosenDefender === 1) {\r\n      ctx.drawImage(\r\n        defender1,\r\n        this.frameX * this.spriteWidth,\r\n        this.frameY * this.spriteHeight,\r\n        this.spriteWidth,\r\n        this.spriteHeight,\r\n        this.x,\r\n        this.y,\r\n        this.width,\r\n        this.height\r\n      );\r\n    } else if (this.chosenDefender === 2) {\r\n      ctx.drawImage(\r\n        defender2,\r\n        this.frameX * this.spriteWidth,\r\n        this.frameY * this.spriteHeight,\r\n        this.spriteWidth,\r\n        this.spriteHeight,\r\n        this.x,\r\n        this.y,\r\n        this.width,\r\n        this.height\r\n      );\r\n    }\r\n  }\r\n  update() {\r\n    if (frame % 8 === 0) {\r\n      if (this.frameX < this.maxFrame) this.frameX++;\r\n      else this.frameX = this.minFrame;\r\n      if (this.frameX === 15) this.shootNow = true;\r\n    }\r\n    if (this.chosenDefender === 1) {\r\n      if (this.shooting) {\r\n        this.minFrame = 0;\r\n        this.maxFrame = 16;\r\n      } else {\r\n        this.minFrame = 17;\r\n        this.maxFrame = 24;\r\n      }\r\n    } else if (this.chosenDefender === 2) {\r\n      if (this.shooting) {\r\n        this.minFrame = 13;\r\n        this.maxFrame = 28;\r\n      } else {\r\n        this.minFrame = 0;\r\n        this.maxFrame = 12;\r\n      }\r\n    }\r\n\r\n    if (this.shooting && this.shootNow) {\r\n      projectiles.push(new Projectile(this.x + 70, this.y + 50));\r\n      this.shootNow = false;\r\n    }\r\n  }\r\n}\r\ncanvas.addEventListener(\"click\", function () {\r\n  const gridPositionX = mouse.x - (mouse.x % cellSize) + cellGap;\r\n  const gridPositionY = mouse.y - (mouse.y % cellSize) + cellGap;\r\n  if (gridPositionY < cellSize) return;\r\n  for (let i = 0; i < defenders.length; i++) {\r\n    if (defenders[i].x === gridPositionX && defenders[i].y === gridPositionY)\r\n      return;\r\n  }\r\n  let defenderCost = 100;\r\n  if (numberOfResources >= defenderCost) {\r\n    defenders.push(new Defender(gridPositionX, gridPositionY));\r\n    numberOfResources -= defenderCost;\r\n  }\r\n});\r\nfunction handleDefenders() {\r\n  for (let i = 0; i < defenders.length; i++) {\r\n    defenders[i].draw();\r\n    defenders[i].update();\r\n    if (enemyPositions.indexOf(defenders[i].y) !== -1) {\r\n      defenders[i].shooting = true;\r\n    } else {\r\n      defenders[i].shooting = false;\r\n    }\r\n    for (let j = 0; j < enemies.length; j++) {\r\n      if (defenders[i] && collision(defenders[i], enemies[j])) {\r\n        enemies[j].movement = 0;\r\n        defenders[i].health -= 1;\r\n      }\r\n      if (defenders[i] && defenders[i].health <= 0) {\r\n        defenders.splice(i, 1);\r\n        i--;\r\n        enemies[j].movement = enemies[j].speed;\r\n      }\r\n    }\r\n  }\r\n}\r\nconst card1 = {\r\n  x: 10,\r\n  y: 10,\r\n  width: 70,\r\n  height: 85\r\n};\r\n\r\nconst card2 = {\r\n  x: 90,\r\n  y: 10,\r\n  width: 70,\r\n  height: 85\r\n};\r\n\r\nfunction chooseDefender() {\r\n  let card1stroke = \"black\";\r\n  let card2stroke = \"black\";\r\n  if (collision(mouse, card1) && mouse.clicked) {\r\n    chosenDefender = 1;\r\n  } else if (collision(mouse, card2)) {\r\n    chosenDefender = 2;\r\n  }\r\n  if (chosenDefender === 1) {\r\n    card1stroke = \"gold\";\r\n    card2stroke = \"black\";\r\n  } else if (chosenDefender === 2) {\r\n    card1stroke = \"black\";\r\n    card2stroke = \"gold\";\r\n  } else {\r\n    card1stroke = \"black\";\r\n    card2stroke = \"gold\";\r\n  }\r\n\r\n  ctx.lineWidth = 1;\r\n  ctx.fillStyle = \"rgba(0,0,0,0,2)\";\r\n  ctx.fillRect(card1.x, card1.y, card1.width, card1.height);\r\n  ctx.strokeStyle = card1stroke;\r\n  ctx.strokeRect(card1.x, card2.y, card1.width, card1.height);\r\n  ctx.drawImage(defender1, 0, 0, 192, 192, 0, 5, 192 / 2, 192 / 2);\r\n  ctx.fillRect(card2.x, card2.y, card2.width, card2.height);\r\n  ctx.drawImage(defender2, 0, 0, 192, 192, 80, 5, 192 / 2, 192 / 2);\r\n  ctx.strokeStyle = card2stroke;\r\n  ctx.strokeRect(card2.x, card2.y, card2.width, card2.height);\r\n}\r\n\r\n// enemies\r\n// const enemyTypes = [];\r\nvar enemyTypes = [];\r\n\r\nvar enemy1 = {};\r\nenemy1 = new Image();\r\nenemy1.onload = function () {};\r\nenemy1.src = \"src/enemy1.png\";\r\nenemyTypes.push(enemy1);\r\nvar enemy2 = {};\r\nenemy2 = new Image();\r\nenemy2.onload = function () {};\r\nenemy2.src = \"src/enemy2.png\";\r\nenemyTypes.push(enemy2);\r\n\r\nclass Enemy {\r\n  constructor(verticalPosition) {\r\n    this.x = canvas.width;\r\n    this.y = verticalPosition;\r\n    this.width = cellSize - cellGap * 2;\r\n    this.height = cellSize - cellGap * 2;\r\n    this.speed = Math.random() * 0.2 + 0.4;\r\n    this.movement = this.speed;\r\n    this.health = 100;\r\n    this.maxHealth = this.health;\r\n    // this.enemyType = enemyTypes[Math.floor(Math.random() * enemyTypes.length)];\r\n    this.enemyType = enemyTypes[Math.round(Math.random())];\r\n    this.frameX = 0;\r\n    this.frameY = 0;\r\n    this.minFrame = 0;\r\n    this.maxFrame = 7;\r\n    this.spriteWidth = 192;\r\n    this.spriteHeight = 192;\r\n  }\r\n  update() {\r\n    this.x -= this.movement;\r\n    if (frame % 9 === 0) {\r\n      // try 10 instead of 9\r\n      if (this.frameX < this.maxFrame) this.frameX++;\r\n      else this.frameX = this.minFrame;\r\n    }\r\n  }\r\n  draw() {\r\n    // ctx.fillStyle = \"red\";\r\n    // ctx.fillRect(this.x, this.y, this.width, this.height);\r\n    ctx.fillStyle = \"black\";\r\n    ctx.font = \"30px Orbitron\";\r\n    ctx.fillText(Math.floor(this.health), this.x + 15, this.y + 30);\r\n    // ctx.drawImage(img,sx,sy,sw,sh,dx,dy,dw,dh);\r\n    ctx.drawImage(\r\n      this.enemyType,\r\n      this.frameX * this.spriteWidth,\r\n      0,\r\n      this.spriteWidth,\r\n      this.spriteHeight,\r\n      this.x,\r\n      this.y,\r\n      this.width,\r\n      this.height\r\n    );\r\n  }\r\n}\r\nfunction handleEnemies() {\r\n  for (let i = 0; i < enemies.length; i++) {\r\n    enemies[i].update();\r\n    enemies[i].draw();\r\n    if (enemies[i].x < 0) {\r\n      gameOver = true;\r\n    }\r\n    if (enemies[i].health <= 0) {\r\n      let gainedResources = enemies[i].maxHealth / 10;\r\n      numberOfResources += gainedResources;\r\n      score += gainedResources;\r\n      const findThisIndex = enemyPositions.indexOf(enemies[i].y);\r\n      enemyPositions.splice(findThisIndex, 1);\r\n      enemies.splice(i, 1);\r\n      i--;\r\n    }\r\n  }\r\n  if (frame % enemiesInterval === 0 && score < winningScore) {\r\n    let verticalPosition =\r\n      Math.floor(Math.random() * 5 + 1) * cellSize + cellGap;\r\n    enemies.push(new Enemy(verticalPosition));\r\n    enemyPositions.push(verticalPosition);\r\n    if (enemiesInterval > 120) enemiesInterval -= 50;\r\n  }\r\n}\r\n\r\n// resources\r\nconst amounts = [20, 30, 40];\r\nclass Resource {\r\n  constructor() {\r\n    this.x = Math.random() * (canvas.width - cellSize);\r\n    this.y = (Math.floor(Math.random() * 5) + 1) * cellSize + 25;\r\n    this.width = cellSize * 0.6;\r\n    this.height = cellSize * 0.6;\r\n    this.amount = amounts[Math.floor(Math.random() * amounts.length)];\r\n  }\r\n  draw() {\r\n    ctx.fillStyle = \"yellow\";\r\n    ctx.fillRect(this.x, this.y, this.width, this.height);\r\n    ctx.fillStyle = \"black\";\r\n    ctx.font = \"20px Orbitron\";\r\n    ctx.fillText(this.amount, this.x + 15, this.y + 25);\r\n  }\r\n}\r\nfunction handleResources() {\r\n  if (frame % 500 === 0 && score < winningScore) {\r\n    resources.push(new Resource());\r\n  }\r\n  for (let i = 0; i < resources.length; i++) {\r\n    resources[i].draw();\r\n    if (resources[i] && mouse.x && mouse.y && collision(resources[i], mouse)) {\r\n      numberOfResources += resources[i].amount;\r\n      resources.splice(i, 1);\r\n      i--;\r\n    }\r\n  }\r\n}\r\n\r\n// utilities\r\nfunction handleGameStatus() {\r\n  ctx.fillStyle = \"gold\";\r\n  ctx.font = \"30px Orbitron\";\r\n  ctx.fillText(\"Score: \" + score, 180, 40);\r\n  ctx.fillText(\"Resources: \" + numberOfResources, 180, 80);\r\n  if (gameOver) {\r\n    ctx.fillStyle = \"black\";\r\n    ctx.font = \"90px Orbitron\";\r\n    ctx.fillText(\"GAME OVER\", 135, 330);\r\n  }\r\n  if (score >= winningScore && enemies.length === 0) {\r\n    ctx.fillStyle = \"black\";\r\n    ctx.font = \"60px Orbitron\";\r\n    ctx.fillText(\"LEVEL COMPLETE\", 130, 300);\r\n    ctx.font = \"30px Orbitron\";\r\n    ctx.fillText(\"You win with \" + score + \" points!\", 134, 340);\r\n  }\r\n}\r\n\r\nfunction animate() {\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  ctx.fillStyle = \"blue\";\r\n  ctx.fillRect(0, 0, controlsBar.width, controlsBar.height);\r\n  handleGameGrid();\r\n  handleDefenders();\r\n  handleResources();\r\n  handleProjectiles();\r\n  handleEnemies();\r\n  chooseDefender();\r\n  handleGameStatus();\r\n  frame++;\r\n  if (!gameOver) requestAnimationFrame(animate);\r\n}\r\nanimate();\r\n\r\nfunction collision(first, second) {\r\n  if (\r\n    !(\r\n      first.x > second.x + second.width ||\r\n      first.x + first.width < second.x ||\r\n      first.y > second.y + second.height ||\r\n      first.y + first.height < second.y\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n}\r\n\r\nwindow.addEventListener(\"resize\", function () {\r\n  canvasPosition = canvas.getBoundingClientRect();\r\n});\r\n"]}